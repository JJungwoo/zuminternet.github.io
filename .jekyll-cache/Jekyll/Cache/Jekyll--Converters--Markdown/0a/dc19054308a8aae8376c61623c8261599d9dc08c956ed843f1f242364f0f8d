I"]O<p><strong>대부분의 Nexus 관련 글이 2.x.x 버전을 기준으로 작성되어 있어 3.x.x 기준으로 간단히 정리를 해보려고 합니다.</strong></p>

<h2 id="nexus란">Nexus란?</h2>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/nexus.png" alt="nexus" /></p>

<p>Nexus는 Sonatype 에서 만든 저장소 관리자 프로젝트로, 다양한 Format 의 사설 저장소를 만들 수 있으며 메인 저장소를 Cache할 수 있는 기능 또한 제공하여 저장소를 관리할 수 있도록 도와주는 관리자 도구입니다. Maven 에서 사용할 수 있는 가장 널리 사용되는 무료 저장소로 잘 알려져있습니다.</p>

<h3 id="사설-저장소가-필요한-이유">사설 저장소가 필요한 이유</h3>

<p><a href="https://gs.saro.me/#!m=elec&amp;jn=774">가리사니-사설 Repository Nexus 설치 / 연동</a> 에 박용서님이 작성해주신 글에 잘 설명되어있습니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/why.png" alt="why" /></p>

<p><em>(출처 : <a href="https://gs.saro.me/#!m=elec&amp;jn=774">가리사니-사설 Repository Nexus 설치 / 연동</a>)</em></p>

<p><strong>몇 가지 추가하자면,</strong></p>

<ul>
  <li>개발팀에서 사용하는 공통 라이브러리들을 공유</li>
  <li>특정 솔루션을 사용하기 위한 3rd Party 라이브러리의 관리</li>
</ul>

<p>를 위해서도 필요하다고 생각됩니다.</p>

<h3 id="diff-nexus-2x-3x">DIFF NEXUS 2.X, 3.X</h3>

<p>Nexus 3는 아키텍처와 기능을 완전히 새로 작성하여 성능 및 사용성 개선을 하였고, 더 많은 Format을 지원하며, 2016년 4월경 릴리즈되었습니다. 아키텍처와 기능을 완전히 새로 작성하여 만들어졌기 때문에 2.X 버전과의 동등성과 하위호환성이 보장되지 않습니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/jeff.png" alt="jeff" /></p>

<p>2.x 버전에서 3.x 버전으로 업그레이드를 고려하신다면<a href="https://support.sonatype.com/hc/en-us/articles/226489388-Nexus-Repository-Manager-2-x-to-3-x-Feature-Equivalency">(Nexus Repository Manager 2.x to 3.x Feature Equivalency)</a> 를 꼭 참고하시길 바랍니다!</p>

<h3 id="지원-포맷">지원 포맷</h3>

<h4 id="nexus-2x">NEXUS 2.X</h4>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/oss2.png" alt="oss2" /></p>

<h4 id="nexus-3x">NEXUS 3.X</h4>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/oss3.png" alt="oss3" /></p>

<p>2.X 에서 3.X 로 업그레이드되면서 지원 포맷이 대폭 확장되었습니다!</p>

<p><strong>Docker</strong> 와 <strong>npm</strong> 까지!! ( 제가 .NET과 Python, Ruby를 안써서 나머지는 인기있다는 정도만 압니다! )</p>

<p>2.X 버전 때는 Nexus는 <code class="language-plaintext highlighter-rouge">Maven 저장소</code> 라는 인식이 강했는데, 3.X 버전의 Nexus는 <strong>Maven 뿐만아니라, 다양한 포맷을 지원하는 저장소 관리자</strong> 라는 생각이 확 듭니다!</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/format.png" alt="format" /></p>

<hr />

<p>이제 본격적으로 Nexus <code class="language-plaintext highlighter-rouge">설치</code>부터, <code class="language-plaintext highlighter-rouge">Maven</code>, <code class="language-plaintext highlighter-rouge">NPM</code> 까지의 사용 방법입니다. <code class="language-plaintext highlighter-rouge">Docker</code> 에 대한 내용은 SlideShare에 공유 된 <a href="https://www.slideshare.net/ssuser800974/sonatype-nexus-docker-registry">Sonatype nexus 로 docker registry 관리하기</a> 를 추천드립니다! Nexus 3 환경을 기준으로 잘 작성되어있습니다.</p>

<h2 id="nexus-3-시작하기">Nexus 3 시작하기</h2>

<h3 id="설치">설치</h3>

<p>Nexus를 설치하는 방법은 크게 2가지 입니다.</p>

<p>Sonatype 사이트에서 제공하는 압축 파일을 통해 설치 및 실행하는 방법과, Docker 이미지로 설치 및 실행하는 방법입니다.</p>

<p>Docker 이미지로 설치는 <a href="https://github.com/sonatype/docker-nexus3">Sonaytype Github</a>에 설명이 잘 되어있어 링크로 대체합니다! 아래에서는 파일로 설치 및 실행만 기술하였습니다.</p>

<h4 id="파일-설치-및-실행">파일 설치 및 실행</h4>

<p>Sonatype 홈페이지(https://www.sonatype.com/download-oss-sonatype)에서 OSS 3.X 버전을 다운로드하고 압축을 해제합니다.</p>

<p>압축을 해제했을 때 아래의 2개의 폴더가 보입니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/folder.png" alt="folder" /></p>

<ul>
  <li>
    <p>nexus 3.x</p>

    <ul>
      <li>Nexus Repository Manager 어플리케이션 폴더</li>
    </ul>
  </li>
  <li>
    <p>sonatype-work</p>

    <ul>
      <li>Data-store로 저장소, 설정, 캐시 등의 모든 데이터가 이 폴더 하위에 저장</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">nexus 3.x</code> 폴더 하위의 <code class="language-plaintext highlighter-rouge">bin</code> 폴더에는 Nexus 어플리케이션 구동에 관한 스크립트가 있습니다. <code class="language-plaintext highlighter-rouge">bin</code> 폴더 하위의 <code class="language-plaintext highlighter-rouge">nexus</code>를 실행합니다.</p>

<ul>
  <li>UNIX</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./nexus run
</code></pre></div></div>

<ul>
  <li>WINDOW</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nexus.exe /run
</code></pre></div></div>

<p>실행에 성공하면!</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/run.png" alt="run" /></p>

<p>이 외의 다양한 설정은 <a href="https://books.sonatype.com/nexus-book/reference3/install.html">공식 Document</a>를 참고! (위 내용도 이 문서에 다 있습니다.)</p>

<h4 id="설치-끝">설치 끝</h4>

<ul>
  <li>요약
    <ul>
      <li>다운 받는다.</li>
      <li>실행한다.</li>
    </ul>
  </li>
</ul>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/welcome.png" alt="welcome" /></p>

<p>기본 ID 와 비밀번호는 <code class="language-plaintext highlighter-rouge">admin / admin123</code> 입니다!</p>

<hr />

<h3 id="blob-stores">Blob Stores</h3>

<p>모든 저장소는 Blob Store를 지정해줘야 합니다. Blob Store는 실제 데이터가 저장되는 장소이며, sonatype-work의 하위 디렉토리와 매칭됩니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/blob.png" alt="blob" /></p>

<hr />

<h3 id="repository-type">Repository Type</h3>

<p>모든 Format의 저장소에는 3가지 <code class="language-plaintext highlighter-rouge">Type</code> 이 있습니다.</p>

<ul>
  <li>
    <p>proxy</p>

    <ul>
      <li>말그대로 외부의 다른 경로를 proxy하는 저장소입니다. 이 proxy를 통해 외부(공식 라이브러리 저장소 등)의 데이터를 캐시할 수 있습니다.</li>
    </ul>
  </li>
  <li>
    <p>hosted</p>

    <ul>
      <li>자체 모듈 저장소입니다.</li>
    </ul>
  </li>
  <li>
    <p>group</p>

    <ul>
      <li>proxy 와 hosted 들을 묶을 수 있는 단위 집단입니다. 그룹에 저장소를 나열하는 순서가 그룹의 라이브러리를 탐색 우선순위가 됩니다.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="ui-구성">UI 구성</h3>

<h4 id="browse">Browse</h4>

<p>접속 초기 화면의 Browse 탭에서는 생성된 저장소들을 확인할 수 있으며, 저장소에 저장되어 있는 내용을 확인할 수 있습니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/browser.png" alt="browser" /></p>

<h4 id="administration">Administration</h4>

<p>로그인을 하면 생기는 Administration 탭에서는 Nexus의 모든 것을 설정할 수 있습니다. 권한 관리 및 Blob, Repository 생성 삭제도 이곳에서 할 수 있습니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/sett.png" alt="settings" /></p>

<h4 id="데이터-ui-업로드-기능">데이터 UI 업로드 기능</h4>

<p>충격적이게도 UI 에서 라이브러리 등의 파일을 업로드하는 기능이 없습니다. 이 건은 Neuxs 3가 릴리즈 됐을 때부터 지금까지도 활발히 Nexus Issue(<a href="https://issues.sonatype.org/browse/NEXUS-10121">https://issues.sonatype.org/browse/NEXUS-10121</a>)에서 진행 중 입니다.</p>

<p>꼭 생겼으면..</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/cry.png" alt="cry" /></p>

<hr />

<h3 id="gradle에서-maven-repository로-사용">Gradle에서 Maven Repository로 사용</h3>

<p>이 곳에서 Maven의 Snapshots과 releases 구성에 대한 설명은 하지 않겠습니다. 기본적으로 아래와 같은 샘플들이 주어집니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/maven-example.png" alt="maven-example" /></p>

<p>설정을 참고하여 구조를 작성할 수 있습니다.</p>

<h4 id="nexus-저장소로-upload">Nexus 저장소로 Upload</h4>

<p><code class="language-plaintext highlighter-rouge">build.gradle</code> 에 Nexus 배포를 위한 <code class="language-plaintext highlighter-rouge">uploadArchives</code> 스크립트를 작성합니다.</p>

<blockquote>
  <p>build.gradle</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">'</span><span class="n">maven</span><span class="err">'</span>

<span class="n">group</span> <span class="o">=</span> <span class="s">"com.kingbbode"</span>
<span class="n">version</span> <span class="o">=</span> <span class="err">'</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="no">SNAPSHOT</span><span class="err">'</span>

<span class="n">project</span><span class="o">.</span><span class="na">group</span> <span class="o">=</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">kingbbode</span><span class="err">'</span>

<span class="n">uploadArchives</span> <span class="o">{</span>
    <span class="n">repositories</span> <span class="o">{</span>
        <span class="n">mavenDeployer</span> <span class="o">{</span>
            <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="err">'</span><span class="nl">http:</span><span class="c1">//your.nexus.repository.com/nexus/content/repositories/releases/') {</span>
                <span class="n">authentication</span><span class="o">(</span><span class="nl">userName:</span> <span class="err">'</span><span class="n">계정명</span><span class="err">'</span><span class="o">,</span> <span class="nl">password:</span> <span class="err">'</span><span class="n">비밀번호</span><span class="err">'</span><span class="o">)</span>
            <span class="o">}</span>
            <span class="n">snapshotRepository</span><span class="o">(</span><span class="nl">url:</span> <span class="err">'</span><span class="nl">http:</span><span class="c1">//your.nexus.repository.com/nexus/content/repositories/snapshot/') {</span>
                <span class="n">authentication</span><span class="o">(</span><span class="nl">userName:</span> <span class="err">'</span><span class="n">계정명</span><span class="err">'</span><span class="o">,</span> <span class="nl">password:</span> <span class="err">'</span><span class="n">비밀번호</span><span class="err">'</span><span class="o">)</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>[ 출처 : <a href="http://kwonnam.pe.kr/wiki/gradle/maven">( 권남 : Gradle Maven Deployment )</a>]</p>

<p><code class="language-plaintext highlighter-rouge">project.name</code>이 <code class="language-plaintext highlighter-rouge">artifactId</code> 가 됩니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/upload.png" alt="upload" /></p>

<p><code class="language-plaintext highlighter-rouge">uploadArchives</code> 를 실행하면 Nexus에 업로드가 됩니다.</p>

<p>Nexus의 Component를 살펴보면, 업로드한 프로젝트가 올라와 있는 것을 볼 수 있습니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/d1.png" alt="d1" /></p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/d2.png" alt="d2" /></p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/d3.png" alt="d3" /></p>

<h4 id="nexus-저장소에서-가져오기">Nexus 저장소에서 가져오기</h4>

<p>Nexus를 통해 Dependency를 가져올 때는 해당 Hosted를 직접 지정하거나 상위 Group을 지정할 수 있습니다.</p>

<blockquote>
  <p>build.gradle</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">repositories</span> <span class="o">{</span>
  <span class="n">maven</span> <span class="o">{</span>
    <span class="n">credentials</span> <span class="o">{</span>
      <span class="n">username</span> <span class="s">"admin"</span>
      <span class="n">password</span> <span class="s">"admin123"</span>
    <span class="o">}</span>
    <span class="n">url</span> <span class="s">"http://your.nexus.repository.com/nexus/content/repositories/public/"</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Nexus로 라이브러리를 업로드할 때는 uploadArchives 로 release, snapshot 배포를 하고, Nexus 저장소를 사용하려면 <code class="language-plaintext highlighter-rouge">build.gradle</code> 의 <code class="language-plaintext highlighter-rouge">repositories</code>에 Maven 저장소의 Group을 등록합니다.</p>

<blockquote>
  <p>build.gradle</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">dependencies</span> <span class="o">{</span>
  <span class="n">compile</span><span class="o">(</span><span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">kingbbode</span><span class="o">:</span><span class="n">jooq</span><span class="o">-</span><span class="nl">practice:</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="no">SNAPSHOT</span><span class="err">'</span><span class="o">)</span>
  <span class="o">...</span>
<span class="o">}</span></code></pre></figure>

<p>dependencies 에 업로드한 라이브러리의 group id, artifact id, version을 조합하여 작성한 후 gradle 을 새로고침 합니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/mavenget.png" alt="mavenget" /></p>

<p>성공적으로 잘 들어오는 것을 확인할 수 있습니다!</p>

<p><em>Snapshot 버전이 새로고침되지 않는 이슈가 있습니다. 이게 IntelliJ 이슈인지 Gradle 이슈인지 명확하지 않아 , 링크(<a href="https://youtrack.jetbrains.com/issue/IDEA-125822">https://youtrack.jetbrains.com/issue/IDEA-125822</a>)를 대신 남깁니다.</em></p>

<hr />

<h3 id="npm-mirror-server로-사용">NPM Mirror Server로 사용</h3>

<p>아래와 같은 구조를 기본 구조로 사용합니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/npm.png" alt="npm" /></p>

<p><code class="language-plaintext highlighter-rouge">npm-registry</code> 는 http://registry.npmjs.org 를 Proxy하며, <code class="language-plaintext highlighter-rouge">npm-private</code>에 npm 모듈을 올리려고 합니다.</p>

<p><code class="language-plaintext highlighter-rouge">npm</code> 은 내부 Scope가 겹칠 수 있으므로, 한 <code class="language-plaintext highlighter-rouge">Hosted</code> 저장소에 한 모듈만 올라가도록 구성합니다.</p>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/npmg.png" alt="npmg" /></p>

<p><code class="language-plaintext highlighter-rouge">npm-group</code> 은 두 저장소를 묶습니다.</p>

<h4 id="nexus-저장소로-upload-1">Nexus 저장소로 Upload</h4>

<p><code class="language-plaintext highlighter-rouge">addUser</code>를 통해 <code class="language-plaintext highlighter-rouge">global</code> 로 인증을 선언할 수 있지만, Nexus 저장소의 특성상 계정별 접근 권한 및 다양한 구성과 환경이 있을 것을 감안하여, 저는 각 프로젝트에 <code class="language-plaintext highlighter-rouge">.npmrc</code> 파일을 생성하였습니다.</p>

<blockquote>
  <p>.npmrc</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">_auth</span><span class="o">=</span><span class="nc">YWRtaW46YWRtaW4xMjM</span><span class="o">=</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">.npmrc</code>의 <code class="language-plaintext highlighter-rouge">_auth</code>에는 <code class="language-plaintext highlighter-rouge">&lt;username&gt;:&lt;password&gt;</code>의 형태가 base64 인코딩되어 작성되야 합니다.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="nt">-n</span> <span class="s1">'myuser:mypassword'</span> | openssl <span class="nb">base64</span></code></pre></figure>

<p>위 스크립트를 통해 추출할 수 있습니다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">package.json</code> 에 publish 될 저장소 url을 명세합니다.</p>

<blockquote>
  <p>package.json</p>
</blockquote>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="p">...</span>

  <span class="dl">"</span><span class="s2">publishConfig</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">registry</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://your.nexus.repository.com/repository/npm-private/</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>여기까지 완료되었다면 아래 명령을 통해 Nexus로 배포할 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm publish
</code></pre></div></div>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/npmp.png" alt="npmp" /></p>

<p>배포를 위한 package.json 및 모듈 작성 방법은 아웃사이더님의 <a href="https://blog.outsider.ne.kr/829">Node.js 모듈을 npm 저장소에 배포하기</a>를 추천!</p>

<h4 id="nexus-저장소에서-가져오기-1">Nexus 저장소에서 가져오기</h4>

<p>Nexus를 미러 서버로 사용하기 위해서도 global 로 선언이 가능지만,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm --registry http://your.nexus.repository.com/repository/npm-group/ install -g your-pac
</code></pre></div></div>

<p>각 프로젝트에서 <code class="language-plaintext highlighter-rouge">.npmrc</code> 를 통해 설정하는 방법도 있습니다.</p>

<blockquote>
  <p>.npmrc</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>registry=http://your.nexus.repository.com/repository/npm-group/
</code></pre></div></div>

<p><img src="/images/portal/post/2017-07-04-NEXUS-3XX-MAVEN-NPM/npmd.png" alt="npmd" /></p>

<h2 id="마무리">마무리</h2>

<p>Nexus를 이용해 사설 저장소를 구성하니, 프로젝트의 모듈을 구성하거나, 라이브러리를 제공하는 등 여러가지 면에서 좋은 점이 많은 것 같습니다. 젠킨스도 달아보고, 도커도 해보고 여러가지를 더 해봐야겠습니다.</p>
:ET